# -*- mode: ruby -*-
# vi: set ft=ruby :

# https://github.com/mitchellh/vagrant-aws/issues/382
# Due to issues with vagrant, make the following changes:
# /opt/vagrant/embedded/gems/gems/vagrant-1.7.2/lib/vagrant/util/ssh.rb
# @@ -120 command_options += ["-o", "IdentitiesOnly=yes"]
# @@ +120 command_options += ["-o", "IdentitiesOnly=no"]
# /opt/vagrant/embedded/gems/gems/vagrant-1.7.2/templates/commands/ssh_config/config.erb
# @@ -15 IdentitiesOnly yes
# @@ +15 IdentitiesOnly no
# /opt/vagrant/embedded/gems/gems/vagrant-1.7.2/plugins/communicators/ssh/communicator.rb
# @@ -331 keys_only:             true,
# @@ +331 keys_only:             false,

require 'yaml'
require File.join(File.dirname(File.expand_path(__FILE__)), "lib", "core_ext", "string")

Dir[File.join(File.dirname(File.expand_path(__FILE__)), "scripts", "**/*.rb")].each do |filename|
  require filename
  include File.basename(filename, '.rb').classify.constantize
end

# CONSTANTS
VAGRANTFILE_API_VERSION = "2"
CONFIG_TIMEZONE = "UTC"

REQUIRED_PLUGINS = %w( vagrant-vbguest vagrant-aws vagrant-omnibus vagrant-berkshelf)
PASSWORD_ERROR_MESSAGE = "You need to set your mongodb password in vagrant.yml to something other than 'password'"

settings = YAML.load_file 'vagrant.yml'

def missing_plugins
  @missing_plugins ||= REQUIRED_PLUGINS.reject { |plugin| Vagrant.has_plugin? plugin }
end

missing_plugins.each do |plugin|
  puts "The following plugin is required: #{plugin}"
  puts "Install it with this command: 'vagrant plugin install #{plugin}'"
end

fail 'Required Vagrant plugins not installed. Please install before continuing' if missing_plugins.any?

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "ubuntu/trusty64"

  # This should match the version specified in your
  # Gemfile
  config.omnibus.chef_version = "11.16.0"
  config.ssh.forward_agent = true

  config.berkshelf.enabled = false

  # Assumes that the Vagrantfile is in the root of our
  # Chef repository.
  root_dir = File.dirname(File.expand_path(__FILE__))

  # Assumes that the node definitions are in the nodes
  # subfolder
  nodes = Dir[File.join(root_dir,'nodes','*.json')]

  # Iterate over each of the JSON files
  nodes.each do |file|
    puts "parsing #{file}"
    node_json = JSON.parse(File.read(file))

    # Only process the node if it has a vagrant section
    if(node_json["vagrant"])

      # Allow us to remove certain items from the run_list if we're
      # using vagrant. Useful for things like networking configuration
      # which may not apply.
      if exclusions = node_json["vagrant"]["exclusions"]
        exclusions.each do |exclusion|
          if node_json["run_list"].delete(exclusion)
            puts "removed #{exclusion} from the run list"
          end
        end
      end

      vagrant_name = node_json["vagrant"]["name"]
      vagrant_ip = node_json["vagrant"]["ip"]

      config.vm.define vagrant_name do |vagrant|

        vagrant.vm.provider :aws do |aws, override|
          aws.access_key_id = settings['aws']['access_key_id']
          aws.secret_access_key = settings['aws']['secret_access_key']
          aws.keypair_name = settings['aws']['keypair_name']
          aws.ami = node_json['aws']['ami'] # "ami-27150617" # hvm:ebs
          aws.region = node_json['aws']['region'] # "us-west-2"
          aws.instance_type = node_json['aws']['instance_type'] # "t2.micro"
          aws.private_ip_address = node_json['aws']['private_ip_address'] # "10.0.0.11"
          aws.security_groups = node_json['aws']['security_groups'] # ["sg-20e55e44"]
          aws.subnet_id = node_json['aws']['subnet_id'] # "subnet-37284740"
          aws.elastic_ip = node_json['aws']['elastic_ip'] # true
          aws.tags = node_json['aws']['tags']

          override.vm.box = "dummy"
          override.ssh.username = "ubuntu"
          override.ssh.private_key_path = settings['aws']['private_key_path']
        end

        vagrant.vm.hostname = vagrant_name

        # Only use private networking if we specified an
        # IP. Otherwise fallback to DHCP
        if vagrant_ip
          vagrant.vm.network :private_network, ip: vagrant_ip
        end

        vagrant.vm.provision :shell, inline: set_timezone_script(CONFIG_TIMEZONE)

        vagrant.vm.provision "chef_solo" do |chef|
          # Use berks-cookbooks not cookbooks and remember
          # to explicitly vendor berkshelf cookbooks
          chef.cookbooks_path = ["berks-cookbooks", "site-cookbooks"]
          chef.data_bags_path = "data_bags"
          chef.roles_path = "roles"

          # Instead of using add_recipe and add_role, just
          # assign the node definition json, this will take
          # care of populating the run_list.
          chef.json = node_json
        end

        if node_json['aws']['tags']['type'] == "postgresql"
          node_json['postgresql']['password'].keys.reject{|key| key == "postgres" }.each do |username|
            vagrant.vm.provision :shell, inline: create_postgres_user(username, node_json['vagrant']['postgresql']['plaintext_password'][username])
          end
        end
      end
    end
  end
end
